import pygame
from PIL import Image, ImageDraw, ImageFont
import time

# Initialize pygame
pygame.init()
screen_width = 128  # Width of the OLED screen
screen_height = 64  # Height of the OLED screen
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("OLED Metronome Countdown")

# Path to your TTF font file and metronome images
font_path = 'fonts/InputSansNarrow-Thin.ttf'
metro_images = ['screens/metro1.png', 'screens/metro2.png', 'screens/metro3.png']

# Configuration variables
total_beats = 4  # Change this value for different total beats
beat_interval = 0.5  # Time in seconds between beats, can be changed later

def load_images(paths):
    images = []
    for path in paths:
        image = Image.open(path).convert('RGB')
        pygame_image = pygame.image.fromstring(image.tobytes(), image.size, 'RGB')
        images.append(pygame_image)
    return images

def overlay_text_on_image(image, text):
    pil_image = Image.frombytes('RGB', (image.get_width(), image.get_height()), pygame.image.tostring(image, 'RGB'))
    draw = ImageDraw.Draw(pil_image)

    # Load a custom font
    font_size = 30  # Adjust the font size as needed
    font = ImageFont.truetype(font_path, font_size)

    # Calculate text position
    text_width, text_height = draw.textsize(text, font=font)
    text_x = (pil_image.width - text_width) // 2
    text_y = (pil_image.height - text_height) // 2

    # Draw text on the image
    draw.text((text_x, text_y), text, font=font, fill=(255, 255, 255))  # White text

    # Convert back to a format suitable for pygame
    return pygame.image.fromstring(pil_image.tobytes(), pil_image.size, 'RGB')

def countdown(total_beats, beat_interval, metro_images):
    beat_count = total_beats
    images = load_images(metro_images)

    try:
        while beat_count > 0:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    exit()

            # Alternating between left, middle, and right images
            screen.blit(images[0], (0, 0))  # Left
            screen.blit(overlay_text_on_image(images[0], str(beat_count)), (0, 0))
            pygame.display.flip()
            time.sleep(beat_interval / 2)

            screen.blit(images[1], (0, 0))  # Middle
            screen.blit(overlay_text_on_image(images[1], str(beat_count)), (0, 0))
            pygame.display.flip()
            time.sleep(beat_interval / 2)

            beat_count -= 1

            if beat_count > 0:
                screen.blit(images[2], (0, 0))  # Right
                screen.blit(overlay_text_on_image(images[2], str(beat_count)), (0, 0))
                pygame.display.flip()
                time.sleep(beat_interval / 2)

                screen.blit(images[1], (0, 0))  # Middle
                screen.blit(overlay_text_on_image(images[1], str(beat_count)), (0, 0))
                pygame.display.flip()
                time.sleep(beat_interval / 2)

    except KeyboardInterrupt:
        pygame.quit()

countdown(total_beats, beat_interval, metro_images)
pygame.quit()
